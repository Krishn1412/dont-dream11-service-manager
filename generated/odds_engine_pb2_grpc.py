# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import odds_engine_pb2 as odds__engine__pb2

GRPC_GENERATED_VERSION = "1.71.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in odds_engine_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class OddsEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateMatchState = channel.unary_unary(
            "/odds.OddsEngine/UpdateMatchState",
            request_serializer=odds__engine__pb2.MatchStateRequest.SerializeToString,
            response_deserializer=odds__engine__pb2.OddsResponse.FromString,
            _registered_method=True,
        )
        self.PlaceBet = channel.unary_unary(
            "/odds.OddsEngine/PlaceBet",
            request_serializer=odds__engine__pb2.BetRequest.SerializeToString,
            response_deserializer=odds__engine__pb2.OddsResponse.FromString,
            _registered_method=True,
        )
        self.GetOdds = channel.unary_unary(
            "/odds.OddsEngine/GetOdds",
            request_serializer=odds__engine__pb2.OddsQueryRequest.SerializeToString,
            response_deserializer=odds__engine__pb2.OddsResponse.FromString,
            _registered_method=True,
        )
        self.SetInitialOdds = channel.unary_unary(
            "/odds.OddsEngine/SetInitialOdds",
            request_serializer=odds__engine__pb2.SetInitialOddsRequest.SerializeToString,
            response_deserializer=odds__engine__pb2.Ack.FromString,
            _registered_method=True,
        )


class OddsEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateMatchState(self, request, context):
        """Called by the manager to update match state for a specific game"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PlaceBet(self, request, context):
        """Called when a user places a bet; updates exposure + recalculates odds"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOdds(self, request, context):
        """Called to fetch latest odds for any market in any game"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetInitialOdds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OddsEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UpdateMatchState": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateMatchState,
            request_deserializer=odds__engine__pb2.MatchStateRequest.FromString,
            response_serializer=odds__engine__pb2.OddsResponse.SerializeToString,
        ),
        "PlaceBet": grpc.unary_unary_rpc_method_handler(
            servicer.PlaceBet,
            request_deserializer=odds__engine__pb2.BetRequest.FromString,
            response_serializer=odds__engine__pb2.OddsResponse.SerializeToString,
        ),
        "GetOdds": grpc.unary_unary_rpc_method_handler(
            servicer.GetOdds,
            request_deserializer=odds__engine__pb2.OddsQueryRequest.FromString,
            response_serializer=odds__engine__pb2.OddsResponse.SerializeToString,
        ),
        "SetInitialOdds": grpc.unary_unary_rpc_method_handler(
            servicer.SetInitialOdds,
            request_deserializer=odds__engine__pb2.SetInitialOddsRequest.FromString,
            response_serializer=odds__engine__pb2.Ack.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "odds.OddsEngine", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("odds.OddsEngine", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class OddsEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateMatchState(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/odds.OddsEngine/UpdateMatchState",
            odds__engine__pb2.MatchStateRequest.SerializeToString,
            odds__engine__pb2.OddsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PlaceBet(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/odds.OddsEngine/PlaceBet",
            odds__engine__pb2.BetRequest.SerializeToString,
            odds__engine__pb2.OddsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOdds(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/odds.OddsEngine/GetOdds",
            odds__engine__pb2.OddsQueryRequest.SerializeToString,
            odds__engine__pb2.OddsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetInitialOdds(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/odds.OddsEngine/SetInitialOdds",
            odds__engine__pb2.SetInitialOddsRequest.SerializeToString,
            odds__engine__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
