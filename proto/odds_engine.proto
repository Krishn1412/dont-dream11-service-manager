syntax = "proto3";

package odds;

service OddsEngine {
  // Called by the manager to update match state for a specific game
  rpc UpdateMatchState (MatchStateRequest) returns (OddsResponse);

  // Called when a user places a bet; updates exposure + recalculates odds
  rpc PlaceBet (BetRequest) returns (OddsResponse);

  // Called to fetch latest odds for any market in any game
  rpc GetOdds (OddsQueryRequest) returns (OddsResponse);

  rpc SetInitialOdds (SetInitialOddsRequest) returns (Ack);
}

message SetInitialOddsRequest {
  string game_id = 1;
  string market = 2;
  double initialProbability = 3;
}

message Ack {
  bool success = 1;
  string message = 2;
}

// Represents the match state at a point in time
message BallUpdate {
  int32 innings = 1;
  int32 targetScore = 2;
  int32 currentScore = 3;
  int32 wicketsLeft = 4;
  int32 ballsRemaining = 5;
  repeated int32 recentRuns = 6;
  string striker = 7;
  string nonStriker = 8;
  double pitchModifier = 9;
  bool isWicket = 10;
  bool isDot = 11;
  bool isExtra = 12;
  bool isBoundary = 13;
  string bowler = 14;
  int32 runs = 15;
}

// Update the match state for a specific game
message MatchStateRequest {
  string gameId = 1;
  BallUpdate update = 2;
}

// Represents a bet from a user on a particular game and market
message Bet {
  string userId = 1;
  double stake = 2;
  double odds = 3;
  string market = 4;  // e.g. "match_winner", "over_10.5_runs"
  bool teamA = 5;
}

// Send a bet for a game and market
message BetRequest {
  string gameId = 1;
  Bet bet = 2;
}

// Fetch odds for a specific game and market
message OddsQueryRequest {
  string gameId = 1;
  string market = 2;  // e.g. "match_winner", "over_10.5_runs"
}

// The result (odds/probability) sent back to the manager
message OddsResponse {
  double winProbability = 1; // For now, just teamA win prob. (can be extended)
}